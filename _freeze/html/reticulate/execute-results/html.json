{
  "hash": "a9af37f91625f2a17cb0cb0244c2c59f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Use Python with R with reticulate :: Cheatsheet\"\ndescription: \" \"\nimage-alt: \"\"\nexecute:\n  eval: false\n  output: false\n  warning: false\n---\n\n\n::: {.cell .column-margin}\n<img src=\"images/logo-reticulate.png\" height=\"138\" alt=\"Hex logo for reticulate - a navy blue background with a light-blue and yellow snake semi-coiled across the foreground. 'reticulate' is written across the bottom in white.\" />\n<br><br><a href=\"../reticulate.pdf\">\n<p><i class=\"bi bi-file-pdf\"></i> Download PDF</p>\n<img src=\"../pngs/reticulate.png\" width=\"200\" alt=\"\"/>\n</a>\n<br><br><p>Translations (PDF)</p>\n* <a href=\"../translations/spanish/reticulate_es.pdf\"><i class=\"bi bi-file-pdf\"></i>Spanish</a>\n:::\n\n\n## Getting Started\n\nReticulate makes it very easy to get started with Python in R.\nSimply use py_require() to let Reticulate know which Python version and packages you will need:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(reticulate)\npy_require(\"polars\", python_version=\"3.12\")\npl <- import(\"polars\")\n```\n:::\n\n\nAn isolated Python virtual environment that you will not need to manage is created, this eliminates the risk of the environment becoming unstable overtime.\n\nReticulate uses an extremely fast Python package manager called [uv](https://docs.astral.sh/uv/).\nSome features of this system are:\n\n-   10x–100x faster than pip at setting up virtual environments\n-   Downloads, installs and manages Python versions\n-   Supports macOS, Linux and Windows\n\nReticulate will automatically download and install **uv** for you in a location that does not make system changes to your machine.\n\n## Manage environments\n\nManage Virtualenv and Conda environments.\nUse if `py_require()` is not an option, or if using an existing Python virtual environment.\n\n|  |  |\n|-------------------|-----------------------------------------------------|\n| Create new | `virtualenv_create()` / `conda_create()`<br/> *`virtualenv_create(\"my-env\")`* |\n| Use in R session | `use_virtualenv()` / `use_condaenv()` / `use_python()`<br/> *`use_virtualenv(“my-env\")`* |\n| List available | `virtualenv_list()` / `conda_list()` |\n| Install packages | `py_install()` / `virtualenv_install()` / `conda_install()`<br/> *`py_install(“polars”, \"my-env\")`* |\n| Delete from disk | `virtualenv_remove()` / `conda_remove()`<br/> *`virtualenv_remove(\"my-env\")`* |\n\n## Calling Python\n\n### Import Python Modules\n\nImport any Python module into R, and access the attributes of a module with `$`.\n\n-   `import(module, as = NULL, convert = TRUE, delay_load = FALSE)`: Import a Python module.\n    If convert = TRUE, Python objects are converted to their equivalent R types.\n    Access the attributes of a module with \\$.\n\n    ``` r\n    import(\"polars\")\n    ```\n\n-   `import_from_path(module, path = “.\" )`: Import module from an arbitrary filesystem path.\n\n-   `import_main(convert = TRUE)`: Import the main module, where Python executes code by default.\n\n    ``` r\n    main <- import_main()\n    ```\n\n-   `import_builtins(convert = TRUE)`: Import Python's built-in functions\n\n    ``` r\n    builtins <- import_builtins()\n    builtins$print(\"hello\")\n    ```\n\n### Source Python files\n\nSource a Python script and make the Python functions and objects it creates available in R\n\n-   `source_python(file, envir = parent.frame(), convert = TRUE)`: Run a Python script, assigning objects to a specified R environment.\n\n    ``` r\n    source_python(\"file.py\")\n    ```\n\n### Run Python Code\n\nExecute Python code into the main Python module.\nAccess the results, and anything else in Python's main module, with `py$`.\n\n-   `py_run_file(file, local = FALSE, convert = TRUE)`: Run Python file in the main module.\n\n    ``` r\n    py_run_file(\"my-script.py\")\n    ```\n\n-   `py_eval(code, convert = TRUE)`: Run a Python expression, return the result.\n    py_eval(\"1 + 1”)\n\n    ``` r\n    py_eval(\"1 + 1\") \n    ```\n\n-   `py_run_string(code, local = FALSE, convert = TRUE)`: Run Python code (passed as a string) in the main module.\n\n    ``` r\n    py_run_string(\"x = 10\")\n    py$x\n    ```\n\n### In a Notebook\n\nCall Python as a code chunk in **Quarto** and **R Markdown**\n\n![Combine R and Python in Quarto](images/reticulate-quarto.png){width=\"500\" fig-align=\"center\" fig-alt=\"A screenshot of a Quarto document that combines R code and Python code\"}\n\n-   Begin Python chunks with \\`\\`\\`{python} .\n    Chunk options like echo, include, etc. all work as expected\n\n-   With `py_require()`, define which Python libraries will be used in the notebook\n\n-   Use the `py` object to access objects created\\` in Python chunks from R chunks\n\n-   Python chunks all execute within a single Python session so you have access to all objects created, and modules loaded, in previous chunks.\n\n-   Use the r object to access objects created in R chunks from Python chunks\n\n-   Output displays below chunk, including plots.\n\n### As a Python console (REPL)\n\nA REPL (Read, Eval, Print Loop) is a command line where you can run Python code and view the results.\n\n``` python\n> library(reticulate)\n> py_require(\"plotnine\")\n> repl_python() # Starts a Python REPL\n>>> from plotnine.data import penguins\n>>> penguins.shape\n```\n\n1.  Use py_require() to define libraries and Python version to use\n2.  In RStudio, open in the console with repl_python(), or by running code in a Python script with Cmd + Enter (Windows: Ctrl + Enter). Click on the language logo to toggle between R and Python.\n3.  Type commands at the `>>>` prompt.\n4.  Press Enter to run code.\n5.  Type `exit` to close and return to R console.\n\n## Object Conversion\n\n### Automatic conversions\n\nReticulate provides automatic built-in conversion between Python and R for many Python types.\n\n-   `py_to_r(x)`: Convert a Python object to an R object. Also `r_to_py()`\n\n| R                       | Python                  |\n|-------------------------|-------------------------|\n| Single-element vector   | Scalar                  |\n| Multi-element vector    | List                    |\n| List of multiple types  | Tuple                   |\n| Named List              | Dict                    |\n| Matrix/Array            | NumPy ndarray           |\n| Data Frame              | Pandas DataFrame        |\n| Function                | Python function         |\n| `NULL`, `TRUE`, `FALSE` | `None`, `True`, `False` |\n\n### Manual Conversions\n\nSpecify how the objects will be converted\n\n-   `tuple(..., convert = FALSE)`: Create a Python tuple.\n\n    ``` r\n    tuple(\"a\", \"b\", \"c\")\n    ```\n\n-   `dict(..., convert = FALSE)`: Create a Python dictionary.\n\n    ``` r\n    dict(foo = \"bar\", index = 42L)\n    ```\n\n-   `py_dict()`: A dictionary that uses Python objects as keys.\n\n    ``` r\n    py_dict(\"foo\", \"bar\")\n    ```\n\n-   `np_array(data, dtype = NULL, order = \"C\")`: Create NumPy arrays.\n\n    ``` r\n    np_array(c(1:8), dtype = \"float16\")\n    ```\n\n- `array_reshape(x, dim, order = c(\"C\", \"F\"))`: Reshape a Python array.\n    \n    ```r\n    x <- 1:4\n    array_reshape(x, c(2, 2)) \n    ```\n\n- `py_func(f)`: Wrap an R function in a Python function with the same signature.\n\n    ```r\n    py_func(xor) \n    ```\n    \n- `iterate(it, f = base::identity, simplify = TRUE)`: Apply an R function to \neach value of a Python iterator or return the values as an R vector, draining \nthe iterator as you go. Also `iter_next()` and `as_iterator()`.\n\n- `py_iterator(fn, completed = NULL)`: Create a Python iterator from an R function. \n\n    ```r\n    seq_gen <- function(x){n <- x; function() {n <<- n + 1; n}}\n    py_iterator(seq_gen(9))\n    ```\n    \n## Python in the IDE\n\nThe RStudio and Positron IDE’s provide first-class integration with Reticulate.\n\n![](images/reticulate-rstudio.png){width=\"800\" fig-align=\"center\" fig-alt=\"Screenshot of using Reticulate in the RStudio IDE\"}\n    \n![](images/reticulate-positron.png){width=\"800\" fig-align=\"center\" fig-alt=\"Screenshot of using Reticulate in the Positron IDE\"}    \n    \n## Helpers\n\n- `py_capture_output(expr, type = c(\"stdout\", \"stderr\"))`: Capture and return \nPython output . Also `py_suppress_warnings()`.\n\n- `py_get_attr(x, name, silent = FALSE)`: Get an attribute of a Python object. \nAlso `py_set_attr()`, `py_has_attr()`, and `py_list_attributes()`.\n\n- `py_help(object)`: Open the documentation page for a Python object.\n\n    ```r\n    py_help(sns)\n    ```\n    \n- `py_last_error()`: Get the last Python error encountered. Also \n`py_clear_last_error()` to clear the last error.\n\n- `py_save_object(object, filename, pickle = \"pickle\", ...)`: Save and load \nPython objects with pickle. Also `py_load_object()`.\n\n    ```r\n    py_save_object(x, \"x.pickle\")\n    ```\n\n- `with(data, expr, as = NULL, ...)`: Evaluate an expression within a Python \ncontext manager.\n\n    ```r\n    py <- import_builtins();\n    with(py$open(\"output.txt\", \"w\") %as% file,\n      {file$write(\"Hello, there!\")})\n    ```\n    \n\n## Choosing Python\n\nReticulate follows a specific order to discover and choose the Python \nenvironment to use\n\n1. `RETICULATE_PYTHON` or `RETICULATE_PYTHON_ENV`\n1. `use_python()` or `use_virtualenv()`, if called before `import()`.\n1. Working directory contains a virtual env: ./.venv\n1. Environments named after the imported module. e.g. \n*~/.virtualenvs/r-scipy/ for `import(“scipy\")`*\n1. `RETICULATE_PYTHON_FALLBACK`\n1. The default Virtual Environment: `r-reticulate`\n1. Specifications from `py_require()` (See tip below)\n1. OS’ default Python (PATH or Windows registry)\n\n:::{.callout-tip}\nTo have `py_require()` take more precedence, set `RETICULATE_PYTHON=“managed”`. \nIt will become number 1 on the list.    \n::: \n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}