{
  "hash": "53ee2a5d4cb3967df53a9a0430fd14a8",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Natural Language Processing using LLMs in R & Python :: Cheatsheet\"\ndescription: \" \"\nimage-alt: \"\"\nexecute:\n  eval: true\n  output: false\n  warning: false\n---\n\n<img src=\"images/logo-mall.png\" alt=\"Hex logo for mall - drawing of the inside of a mall. There is a fountain in the middle.\" height=\"138\"/> <br><br><a href=\"../nlp-with-llms.pdf\">\n\n\n::: {.cell .column-margin}\n<a href=\"../nlp-with-llms.pdf\">\n<p><i class=\"bi bi-file-pdf\"></i> Download PDF</p>\n<img src=\"../pngs/nlp-with-llms.png\" width=\"200\" alt=\"\"/>\n</a>\n<br><br>\n:::\n\n\n## Intro\n\nUse LLM’s to perform NLP row-wise over a data frame. mall comes with pre-defined\nprompts that perform specific NLP operations, and then places the results in a \nnew column.\n\n::: {.panel-tabset group=\"language\"}\n### R\n\nUse OpenAI, Ollama, Anthropic and many others thanks to its integration with `ellmer`\n\n### Python\n\nUse OpenAI,\nOllama, Anthropic and many others thanks to its integration with `chatlas`\n\n:::\n\n\n## NLP functions\n\n\n### Sentiment analysis \n\n::: {.panel-tabset group=\"language\"}\n\n### R\n\n- `llm_sentiment(.data, col, options = c(\"positive\", \"negative\", “neutral\"), pred_name = “.sentiment\", additional_prompt = “”)`\n\n    ```r\n    llm_sentiment(reviews, review)\n    ```\n\n- `llm_vec_sentiment(x, options = c(\"positive\", \"negative\", \"neutral\"), additional_prompt = \"\", preview = FALSE)`\n\n    ```r\n    llm_vec_sentiment(c(\"I am happy\", \"I am sad\"))\n    ```\n\n**Special arguments:**\n\n`options`: Customize the sentiments to check for: \n`options = c(“positive”, “negative”)`. Use ‘tilde’ to mask the results, for \nexample `c(\"positive\" ~ 1, \"negative\" ~ 0))` returns 1 for positive and 0 for\nnegative.\n\n### Python\n\n- *\\<Dataframe\\>*`.llm.sentiment(col, options = ['positive', 'negative', 'neutral'], additional='', pred_name ='sentiment')`\n\n    ```python\n    reviews.llm.sentiment('review')\n    ```\n\n- *\\<LLMVec object\\>*`.sentiment(x, options=['positive', 'negative', 'neutral'], additional='')`\n\n    ```python\n    llm.sentiment(['I am happy', 'I am sad'])\n    ```\n\n**Special arguments:**\n\n`options`:  Customize the sentiments to check for: \n`options = [\"positive\", \"negative\"]`. Use a DICT object to mask the results, \nfor example `{\"positive\": 1, \"negative\"  0}` returns 1 for positive and 0 for\nnegative.\n\n\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}