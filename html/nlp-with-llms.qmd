---
title: "Natural Language Processing using LLMs in R & Python :: Cheatsheet"
description: " "
image-alt: ""
execute:
  eval: true
  output: false
  warning: false
---

```{r}
#| eval: true
#| output: asis
#| echo: false
#| column: margin
source("common.R")
use_cheatsheet_logo(
  "mall", 
  alt = "Hex logo for mall - drawing of the inside of a mall. There is a fountain in the middle."
  )
sheet_name <- "nlp-with-llms"
pdf_preview_link(sheet_name)
translation_list(sheet_name)
```

## Intro


::: {.panel-tabset group="language"}

### R

Use LLM’s to perform NLP row-wise over a data frame. `mall` comes with pre-defined
prompts that perform specific NLP operations, and then places the results in a 
new column. Use *OpenAI*, *Ollama*, *Anthropic* and many others thanks to its
integration with `ellmer`

`mall`’s data frame functions are designed with ‘tidy’ principals in mind, so they
work with the Tidyverse packages. `mall` also includes functions that work with 
string vectors.

### Python

Use LLM’s to perform NLP row-wise over a data frame. `mall` comes with pre-defined
prompts that perform specific NLP operations, and then places the results in a 
new column. Use *OpenAI*, *Ollama*, *Anthropic* and many others thanks to its 
integration with `chatlas`

`mall` works as an extension for **Polars** data frames. It also works with
string vectors.

:::

## Getting started

::: {.panel-tabset group="language"}

### R

1. Load the libraries
    
    ```r
    library(mall)
    library(ellmer)
    ```
    
1. Create a vendor specific chat connection

    ```r
    chat <- chat_openai()
    ```

1. Pass the chat object to mall

    ```r
    llm_use(chat)
    ````
    
- *For dataframes:*

    ```r
    data(“reviews") # Sample product reviews
    
    reviews |>
      llm_sentiment(review)
    ```

- *For vectors:*
    
    ```r
    llm_vec_sentiment(c("I am happy", "I am sad”))
    ```

<br/>

::: {style="font-size: 130%;"}    
**Connect automatically**
:::

As a convenience, mall is able to automatically establish a connection with the 
LLM. To do this you can use the `.mall_chat` option: 
`options(.mall_chat=ellmer::chat_openai(model="gpt-4o"))`
Add this line to your *.Rprofile * file in order for that code to run every 
time you start R. You can call `usethis::edit_r_profile()` to edit.

### Python

Start by creating a new LLM connection

```python
from chatlas import ChatOpenAI
chat = ChatOpenAI()
```

- *For Dataframes*

  1. Load the library
  
      ```python
      import mall
      ```
      
  1. Read or load your data frame
  
      ```python
      reviews = mall.MallData.reviews # Sample product
      reviews
      ```
  1. Pass the chat object to mall
  
      ```python
      reviews.llm.use(chat)
      ```
      
  1. Access NLP functions via `.llm`
      
      ```python
      reviews.llm.sentiment('review')
      ```
    
- *For String vectors*

  1. Load the LLMVec class
  
      ```python
      from mall import LLMVec
      ```
  1. Create a new LLMVec object
  
      ```python
      llm = LLMVec(chat)
      ```
      
  1. Pass a vector to a function in the new object
  
      ```python
      llm.sentiment(['I am happy', 'I am sad'])
      ```
    
:::

## NLP functions


### Sentiment analysis 

::: {.panel-tabset group="language"}

### R

- `llm_sentiment(.data, col, options = c("positive", "negative", “neutral"), pred_name = “.sentiment", additional_prompt = “”)`

    ```r
    llm_sentiment(reviews, review)
    ```

- `llm_vec_sentiment(x, options = c("positive", "negative", "neutral"), additional_prompt = "", preview = FALSE)`

    ```r
    llm_vec_sentiment(c("I am happy", "I am sad"))
    ```

**Special arguments:**

`options`: Customize the sentiments to check for: 
`options = c(“positive”, “negative”)`. Use ‘tilde’ to mask the results, for 
example `c("positive" ~ 1, "negative" ~ 0))` returns 1 for positive and 0 for
negative.

### Python

- *\<Dataframe\>*`.llm.sentiment(col, options = ['positive', 'negative', 'neutral'], additional='', pred_name ='sentiment')`

    ```python
    reviews.llm.sentiment('review')
    ```

- *\<LLMVec object\>*`.sentiment(x, options=['positive', 'negative', 'neutral'], additional='')`

    ```python
    llm.sentiment(['I am happy', 'I am sad'])
    ```

**Special arguments:**

`options`:  Customize the sentiments to check for: 
`options = ["positive", "negative"]`. Use a DICT object to mask the results, 
for example `{"positive": 1, "negative"  0}` returns 1 for positive and 0 for
negative.


:::